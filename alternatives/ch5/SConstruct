import os, sys

## Prefic for install(ed) files
PREFIX="/usr/local"
if not os.path.isdir(PREFIX):
    print('[ERROR] Cannot find \'prefix\' directory, aka {:}; aborting'.format(PREFIX), file=sys.stderr)
    sys.exit(1)

## Library version
LIBV="0.1.0"
## Library name
LIBNAME="tiers10"
## Include dir (following prefix) if any
INCDIR="tiers10"

## get number of CPUs and use for parallel builds
num_cpu = int(os.environ.get('NUM_CPU', 2))
SetOption('num_jobs', num_cpu)
print("running with -j %s" % GetOption('num_jobs'))

## Source files (for lib)
lib_src_files = Split("""c2ixys.cpp 
                     c2t.cpp 
                     era00.cpp 
                     nut00a.cpp 
                     nut06a.cpp 
                     p06e.cpp 
                     pfw06.cpp 
                     pn06.cpp 
                     rotation_matrix_3.cpp 
                     s00.cpp 
                     s06.cpp 
                     xy06.cpp 
                     eect00.cpp""")

## Headers (for lib)
hdr_src_files = Split("iau.hpp  iersc.hpp")

## Environments ...
denv = Environment(CCFLAGS='-std=c++17 -g -pg -Wall -Wextra -Werror -pedantic -W -Wshadow -Winline -Wdisabled-optimization -DDEBUG')
penv = Environment(CXXFLAGS='-std=c++17 -Wall -Wextra -Werror -pedantic -W -Wshadow -Winline -O2 -march=native')

## Command line arguments ...
debug = ARGUMENTS.get('debug', 0)

## Construct the build enviroment
env = denv.Clone() if int(debug) else penv.Clone()

## (shared) library ...
vlib = env.SharedLibrary(source=lib_src_files, target=LIBNAME, CPPPATH=['.'], SHLIBVERSION=LIBV)

## Build ....
env.Program(source='test_t2c.cc', target='t2c.out', LIBS=[LIBNAME], LIBPATH='.', CPPPATH=['.'])
env.Program(source='sofa_examples.cpp', target='sofaex.out', LIBS=[LIBNAME], LIBPATH='.', CPPPATH=['.'])
env.Alias(target='install', source=env.Install(dir=os.path.join(PREFIX, 'lib'), source=vlib))
env.Alias(target='install', source=env.Install(dir=os.path.join(PREFIX, 'include', INCDIR), source=hdr_src_files))