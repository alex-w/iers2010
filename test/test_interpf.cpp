#include "iers2010.hpp"
#include <cmath>
#include <cstdio>
#include <cassert>

const double IRJD[] = {
    57204.000, 57205.000, 57206.000, 57207.000, 57207.100, 57207.200, 57207.300,
    57207.400, 57207.500, 57207.700, 57207.800, 57207.900, 57207.990, 57207.999,
    57230.123, 57236.456, 57242.789, 57243.999, 57246.111, 57264.100, 57264.200,
    57264.300, 57264.400, 57264.500, 57264.600, 57264.700, 57264.800, 57264.900,
    57264.999, 57265.000, 57265.123, 57265.456, 57265.789, 57266.000, 57266.123,
    57266.456, 57266.789};
constexpr const int tsize = sizeof(IRJD) / sizeof(double);

const double RJD[] = {
    57205.000, 57206.000, 57207.000, 57208.000, 57209.000, 57210.000, 57211.000,
    57212.000, 57213.000, 57214.000, 57215.000, 57216.000, 57217.000, 57218.000,
    57219.000, 57220.000, 57221.000, 57222.000, 57223.000, 57224.000, 57225.000,
    57226.000, 57227.000, 57228.000, 57229.000, 57230.000, 57231.000, 57232.000,
    57233.000, 57234.000, 57235.000, 57236.000, 57237.000, 57238.000, 57239.000,
    57240.000, 57241.000, 57242.000, 57243.000, 57244.000, 57245.000, 57246.000,
    57247.000, 57248.000, 57249.000, 57250.000, 57251.000, 57252.000, 57253.000,
    57254.000, 57255.000, 57256.000, 57257.000, 57258.000, 57259.000, 57260.000,
    57261.000, 57262.000, 57263.000, 57264.000, 57265.000, 57266.000};
constexpr const int isize = sizeof(RJD) / sizeof(double);

const double X[] = {
    143.585, 145.023, 146.584, 148.605, 150.878, 152.828, 154.865, 156.784,
    158.589, 160.586, 162.994, 165.661, 168.213, 170.397, 172.208, 173.805,
    175.725, 177.372, 178.863, 180.096, 181.076, 182.056, 183.044, 184.507,
    185.880, 187.311, 189.252, 191.134, 192.933, 194.603, 196.321, 198.136,
    200.125, 202.223, 204.573, 206.879, 208.670, 209.976, 210.618, 211.310,
    212.085, 212.794, 213.778, 215.354, 217.028, 218.413, 219.397, 219.890,
    219.491, 219.542, 220.088, 221.253, 222.230, 223.102, 224.084, 225.323,
    225.984, 226.099, 226.138, 225.982, 226.111, 226.169};

const double Y[] = {
    447.324, 446.640, 445.597, 444.673, 444.072, 443.816, 443.739, 443.459,
    442.769, 441.767, 440.573, 439.443, 438.468, 437.517, 436.311, 434.926,
    433.888, 432.915, 432.065, 431.333, 430.395, 429.555, 428.769, 427.851,
    426.790, 425.434, 424.096, 422.975, 421.570, 420.199, 418.686, 417.358,
    415.870, 414.629, 413.481, 412.287, 411.122, 410.047, 408.523, 406.638,
    404.949, 403.346, 401.426, 399.617, 398.037, 396.817, 395.456, 394.008,
    392.340, 390.423, 388.499, 386.445, 384.677, 382.812, 381.104, 379.135,
    377.187, 374.964, 373.275, 371.909, 370.668, 369.669};

const double UT1[] = {
    322.754, 322.063, 321.254, 320.237, 319.036, 317.755, 316.427, 315.103,
    313.854, 312.748, 311.827, 311.099, 310.549, 310.120, 309.719, 309.278,
    308.812, 308.341, 307.856, 307.344, 306.811, 306.296, 305.800, 305.300,
    304.877, 304.489, 304.096, 303.703, 303.239, 302.639, 301.839, 300.857,
    299.697, 298.458, 297.213, 296.038, 295.002, 294.114, 293.355, 292.703,
    292.118, 291.527, 290.888, 290.179, 289.412, 288.607, 287.768, 286.928,
    286.108, 285.285, 284.452, 283.635, 282.872, 282.116, 281.310, 280.420,
    279.454, 278.338, 277.025, 275.505, 273.802, 271.992};

struct {
  double mjd, x, y, ut1;
} results[] = {
{57204.000000000000000, 141.932878607306634, 447.171458747531744, 323.417000117789257},
{57205.000000000000000, 143.584913601873353, 447.324605104996067, 322.753952921102439},
{57206.000000000000000, 145.023017187737281, 446.640547917465881, 322.062958559675167},
{57207.000000000000000, 146.584143020453439, 445.597385570661800, 321.253986975699831},
{57207.099999999998545, 146.768572057053859, 445.496458893249724, 321.161208792947434},
{57207.199999999997090, 146.957713404111814, 445.396424077413087, 321.066413283071483},
{57207.300000000002910, 147.151627266031767, 445.297852293795131, 320.969628638028269},
{57207.400000000001455, 147.349545080268740, 445.201405991673653, 320.870838023624572},
{57207.500000000000000, 147.550572690612597, 445.107284369218519, 320.770029041127941},
{57207.699999999997090, 147.962159176995897, 444.925417915599951, 320.562515321628894},
{57207.800000000002910, 148.173568756355991, 444.838130072834645, 320.455906503222081},
{57207.900000000001455, 148.388234538611187, 444.754016498487942, 320.347404564822853},
{57207.989999999997963, 148.583449725135523, 444.681171098954280, 320.248130565176439},
{57207.999000000003434, 148.603059437994801, 444.674028908814364, 320.238119381354068},
{57230.122999999999593, 187.533975712639091, 425.264386698114492, 304.440833810378138},
{57236.455999999998312, 199.026008321805818, 416.674699894678668, 300.344179112754944},
{57242.788999999997031, 210.502241047313902, 408.877843223026900, 293.505494557867564},
{57243.999000000003434, 211.309134185612834, 406.640155482940884, 292.703571221957986},
{57246.110999999997148, 212.883722637358090, 403.140864704535375, 291.458809119801288},
{57264.099999999998545, 225.987447402824017, 371.777744325907065, 275.341638197502562},
{57264.199999999997090, 225.996066364297917, 371.647001363749496, 275.176583588052949},
{57264.300000000002910, 226.007335300593837, 371.517919330601444, 275.009874198340185},
{57264.400000000001455, 226.020033209377658, 371.390913577230549, 274.841535644919304},
{57264.500000000000000, 226.033350931688034, 371.265764166652616, 274.671631507846257},
{57264.599999999998545, 226.047503034788321, 371.142086467608522, 274.500277454404909},
{57264.699999999997090, 226.063000243128783, 371.020012679300862, 274.327587135090994},
{57264.800000000002910, 226.079527882949890, 370.900175859823321, 274.153621484790619},
{57264.900000000001455, 226.095906437626354, 370.783016218536147, 273.978408452035069},
{57264.999000000003434, 226.111040252383674, 370.669469711398733, 273.803776632190761},
{57265.000000000000000, 226.111187059369030, 370.668333486867539, 273.802007079880866},
{57265.122999999999593, 226.128625882922620, 370.530055295451746, 273.583573047669063},
{57265.455999999998312, 226.168274391077233, 370.175421966842407, 272.985355781552585},
{57265.788999999997031, 226.180193240189681, 369.853508346117223, 272.379050719191696},
// eronuous ...
{57266.000000000000000, 196.827910280882207, -5611.180400552657375, 2218.062767678088676},
{57266.122999999999593, 197.022192396663542, -5651.168901062735131, 2231.166158081166486},
{57266.455999999998312, 197.559157495893572, -5760.314065439510159, 2266.939224719872527},
{57266.788999999997031, 198.106060739392490, -5870.754445037413461, 2303.149359307990835},
};
constexpr const int sz = sizeof(results) / sizeof(results[0]);
static_assert(sz == tsize);

int main() {
  double xint, yint, ut1int;
  for (int i = 0; i < sz; i++) {
    int status =
        iers2010::interp_pole(RJD, X, Y, UT1, isize, IRJD[i], xint, yint, ut1int);
    if (status > 0) {
      fprintf(stderr,
              "Failed interpolating for MJD=%.3f; Input values span interval: "
              "%.3f to %.3f\n",
              IRJD[i], RJD[0], RJD[isize - 1]);
    } else if (status < 0) {
      fprintf(stderr,
              "Value computed (interpolated) but too close to "
              "limits!\ninterpolating for MJD=%.3f; Input values span "
              "interval: %.3f to %.3f\n",
              IRJD[i], RJD[0], RJD[isize - 1]);
    }
    if (status <= 0) {
      //printf("MJD=%.5f\n%.10f %.10f %.10f\n%.10f %.10f %.10f\n", IRJD[i], xint,
      //       yint, ut1int, results[i].x, results[i].y, results[i].ut1);
      assert(std::abs(IRJD[i]-results[i].mjd) < 1e-13);
      assert(std::abs(xint - results[i].x) < 1e-4);
      assert(std::abs(yint - results[i].y) < 1e-4);
      assert(std::abs(ut1int - results[i].ut1) < 1e-4);
    }
  }

  return 0;
}
