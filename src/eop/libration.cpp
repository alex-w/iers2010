#include "doodson.hpp"
#include "eop.hpp"
#include <array>
#include <cmath>

namespace {
struct Table5Data {
  /* Doodson numbers from IERS 2010, Tables 5.1a, 5.1b */
  dso::DoodsonConstituent dn;
  /* cooresponding Coefficients of sin(argument) and cos(argument) */
  double xps, xpc, yps, ypc, ut1s, ut1c, lods, lodc;
};

[[maybe_unused]]constexpr const std::array<Table5Data, 36> Table5 = {
    {{{+0, +0, +0, +0, +1, +0},
      +0.00000e+00,
      +6.00000e-01,
      -1.00000e-01,
      -1.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +0, +0, +1, -1, +0},
      +1.50000e+00,
      +0.00000e+00,
      -2.00000e-01,
      +1.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +0, +0, +1, +0, +0},
      -2.85000e+01,
      -2.00000e-01,
      +3.40000e+00,
      -3.90000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +0, +0, +1, +1, +0},
      -4.70000e+00,
      -1.00000e-01,
      +6.00000e-01,
      -9.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +0, +1, -1, -1, -1},
      -7.00000e-01,
      +2.00000e-01,
      -2.00000e-01,
      -7.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +0, +1, -1, +0, -1},
      +1.00000e+00,
      +3.00000e-01,
      -3.00000e-01,
      +1.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +0, +1, +0, +0, +0},
      +1.20000e+00,
      +2.00000e-01,
      -2.00000e-01,
      +1.40000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +0, +2, -1, +0, +0},
      +1.30000e+00,
      +4.00000e-01,
      -2.00000e-01,
      +2.90000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +1, +0, +0, -1, +0},
      -1.00000e-01,
      -2.00000e-01,
      +0.00000e+00,
      -1.70000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +1, +0, +0, +0, +0},
      +9.00000e-01,
      +4.00000e+00,
      -1.00000e-01,
      +3.24000e+01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +1, +0, +0, +1, +0},
      +1.00000e-01,
      +6.00000e-01,
      +0.00000e+00,
      +5.10000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +2, -2, +1, +0, +0},
      +0.00000e+00,
      +1.00000e-01,
      +0.00000e+00,
      +6.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +2, +0, -1, +0, +0},
      -1.00000e-01,
      +3.00000e-01,
      +0.00000e+00,
      +2.70000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +3, +0, +0, +0, +0},
      -1.00000e-01,
      +1.00000e-01,
      +0.00000e+00,
      +9.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+0, +3, +0, +0, +1, +0},
      -1.00000e-01,
      +1.00000e-01,
      +0.00000e+00,
      +6.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, -2, +0, +1, -1, +0},
      -4.00000e-01,
      +3.00000e-01,
      -3.00000e-01,
      -4.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, -2, +0, +1, +0, +0},
      -2.30000e+00,
      +1.30000e+00,
      -1.30000e+00,
      -2.30000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, -2, +2, -1, +0, +0},
      -4.00000e-01,
      +3.00000e-01,
      -3.00000e-01,
      -4.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, -1, +0, +0, -1, +0},
      -2.10000e+00,
      +1.20000e+00,
      -1.20000e+00,
      -2.10000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, -1, +0, +0, +0, +0},
      -1.14000e+01,
      +6.50000e+00,
      -6.50000e+00,
      -1.14000e+01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, +0, +0, +1, +0, +0},
      +8.00000e-01,
      -5.00000e-01,
      +5.00000e-01,
      +8.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, +1, -2, +0, +0, +0},
      -4.80000e+00,
      +2.70000e+00,
      -2.70000e+00,
      -4.80000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, +1, +0, +0, +0, +0},
      +1.43000e+01,
      -8.20000e+00,
      +8.20000e+00,
      +1.43000e+01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, +1, +0, +0, +1, +0},
      +1.90000e+00,
      -1.10000e+00,
      +1.10000e+00,
      +1.90000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, +2, +0, -1, +0, +0},
      +8.00000e-01,
      -4.00000e-01,
      +4.00000e-01,
      +8.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+2, -2, +0, +2, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +5.00000e-02,
      -3.00000e-02,
      -3.00000e-01,
      -6.00000e-01},
     {{+2, -2, +2, +0, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +6.00000e-02,
      -3.00000e-02,
      -4.00000e-01,
      -7.00000e-01},
     {{+2, -1, +0, +1, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +3.50000e-01,
      -2.00000e-01,
      -2.40000e+00,
      -4.20000e+00},
     {{+2, -1, +2, -1, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +7.00000e-02,
      -4.00000e-02,
      -5.00000e-01,
      -8.00000e-01},
     {{+2, +0, +0, +0, -1, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      -7.00000e-02,
      +4.00000e-02,
      +5.00000e-01,
      +8.00000e-01},
     {{+2, +0, +0, +0, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +1.75000e+00,
      -1.01000e+00,
      -1.22000e+01,
      -2.13000e+01},
     {{+2, +1, +0, -1, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      -5.00000e-02,
      +3.00000e-02,
      +3.00000e-01,
      +6.00000e-01},
     {{+2, +2, -3, +0, +0, +1},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +5.00000e-02,
      -3.00000e-02,
      -3.00000e-01,
      -6.00000e-01},
     {{+2, +2, -2, +0, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +7.60000e-01,
      -4.40000e-01,
      -5.50000e+00,
      -9.50000e+00},
     {{+2, +2, +0, +0, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +2.10000e-01,
      -1.20000e-01,
      -1.50000e+00,
      -2.60000e+00},
     {{+2, +2, +0, +0, +1, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +6.00000e-02,
      -4.00000e-02,
      -4.00000e-01,
      -8.00000e-01}}}; /* Table5 */

constexpr const std::array<Table5Data, 36-15> Table5NoLongTides = {{
     {{+1, -2, +0, +1, -1, +0},
      -4.00000e-01,
      +3.00000e-01,
      -3.00000e-01,
      -4.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, -2, +0, +1, +0, +0},
      -2.30000e+00,
      +1.30000e+00,
      -1.30000e+00,
      -2.30000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, -2, +2, -1, +0, +0},
      -4.00000e-01,
      +3.00000e-01,
      -3.00000e-01,
      -4.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, -1, +0, +0, -1, +0},
      -2.10000e+00,
      +1.20000e+00,
      -1.20000e+00,
      -2.10000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, -1, +0, +0, +0, +0},
      -1.14000e+01,
      +6.50000e+00,
      -6.50000e+00,
      -1.14000e+01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, +0, +0, +1, +0, +0},
      +8.00000e-01,
      -5.00000e-01,
      +5.00000e-01,
      +8.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, +1, -2, +0, +0, +0},
      -4.80000e+00,
      +2.70000e+00,
      -2.70000e+00,
      -4.80000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, +1, +0, +0, +0, +0},
      +1.43000e+01,
      -8.20000e+00,
      +8.20000e+00,
      +1.43000e+01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, +1, +0, +0, +1, +0},
      +1.90000e+00,
      -1.10000e+00,
      +1.10000e+00,
      +1.90000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+1, +2, +0, -1, +0, +0},
      +8.00000e-01,
      -4.00000e-01,
      +4.00000e-01,
      +8.00000e-01,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00},
     {{+2, -2, +0, +2, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +5.00000e-02,
      -3.00000e-02,
      -3.00000e-01,
      -6.00000e-01},
     {{+2, -2, +2, +0, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +6.00000e-02,
      -3.00000e-02,
      -4.00000e-01,
      -7.00000e-01},
     {{+2, -1, +0, +1, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +3.50000e-01,
      -2.00000e-01,
      -2.40000e+00,
      -4.20000e+00},
     {{+2, -1, +2, -1, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +7.00000e-02,
      -4.00000e-02,
      -5.00000e-01,
      -8.00000e-01},
     {{+2, +0, +0, +0, -1, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      -7.00000e-02,
      +4.00000e-02,
      +5.00000e-01,
      +8.00000e-01},
     {{+2, +0, +0, +0, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +1.75000e+00,
      -1.01000e+00,
      -1.22000e+01,
      -2.13000e+01},
     {{+2, +1, +0, -1, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      -5.00000e-02,
      +3.00000e-02,
      +3.00000e-01,
      +6.00000e-01},
     {{+2, +2, -3, +0, +0, +1},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +5.00000e-02,
      -3.00000e-02,
      -3.00000e-01,
      -6.00000e-01},
     {{+2, +2, -2, +0, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +7.60000e-01,
      -4.40000e-01,
      -5.50000e+00,
      -9.50000e+00},
     {{+2, +2, +0, +0, +0, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +2.10000e-01,
      -1.20000e-01,
      -1.50000e+00,
      -2.60000e+00},
     {{+2, +2, +0, +0, +1, +0},
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +0.00000e+00,
      +6.00000e-02,
      -4.00000e-02,
      -4.00000e-01,
      -8.00000e-01}}}; /* Table5 */
} /* unnamed namespace */

int dso::deop_libration(const double *const fargs, double gmst, double &dxp,
                        double &dyp, double &dut1, double &dlod) noexcept {
  /* get Doodson arguments from Delaunay arguments and GMST */
  double dargs[6];
  dso::delaunay2doodson(fargs, gmst, dargs);
  /* these will never change */
  const double *__restrict__ f = dargs;

  /* set corrections to zero */
  dxp = dyp = 0e0;
  dut1 = dlod = 0e0;
  for (const auto &entry : Table5NoLongTides) {
    const double arg = entry.dn.argument(f);
    const double sa = std::sin(arg);
    const double ca = std::cos(arg);
    dxp += sa * entry.xps + ca * entry.xpc;    /* microarcseconds */
    dyp += sa * entry.yps + ca * entry.ypc;    /* microarcseconds */
    dut1 += sa * entry.ut1s + ca * entry.ut1c; /* microseconds */
    dlod += sa * entry.lods + ca * entry.lodc; /* microseconds */
  }

  return 0;
}
