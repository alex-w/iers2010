#include "solid_earth_tide.hpp"
#include "doodson.hpp"
#include "iau.hpp"
#include <array>

namespace {

double gmst_torsten(const dso::MjdEpoch &tutc) {
  /* Greenwich mean sidereal time, groops.  */
  double Tu0 = (tutc.imjd() - 51544.5) / 36525.0;

  double GMST0 = (6.0 / 24 + 41.0 / (24 * 60) + 50.54841 / (24 * 60 * 60)) +
                 (8640184.812866 / (24 * 60 * 60)) * Tu0 +
                 (0.093104 / (24 * 60 * 60)) * Tu0 * Tu0 +
                 (-6.2e-6 / (24 * 60 * 60)) * Tu0 * Tu0 * Tu0;
  double r = 1.002737909350795 + 5.9006e-11 * Tu0 - 5.9e-15 * Tu0 * Tu0;

  double gmsttt = fmod(2 * dso::DPI * (GMST0 + r * tutc.fractional_days().days()), 2 * dso::DPI);

  return gmsttt;
}

/* @brief Table 6.5a from IERS2010, to compute Step 2 corrections for m=0 */
struct Step2TidesCoeffs {
  /* Doodson Number */
  dso::DoodsonConstituent mdn;
  /* In-Phase Amp i.e. A_m * Real(δk_f) * H_f * 1e12 */
  double ampInPhase; 
  /* Out-Of-Phase Amp, i.e. A_m * Imag(δk_f) * H_f * 1e12 */
  double ampOutOfPhase;
}; /* Step2Tides */

/* @brief Table 6.5[abc] from IERS2010.
 * Columns are: Doodon N., Amp(in-phase)*1e-12, Amp(out-of-phase)*1e-12
 * @warning Units in In- and Out-of- phase are 1e-12
 */
constexpr const std::array<Step2TidesCoeffs,71> Step2 = {{
{/*125755*/ {1,-3, 0, 2, 0, 0}, -1.00000000e-01, +0.00000000e+00 },
{/*127555*/ {1,-3, 2, 0, 0, 0}, -1.00000000e-01, +0.00000000e+00 },
{/*135645*/ {1,-2, 0, 1,-1, 0}, -1.00000000e-01, +0.00000000e+00 },
{/*135655*/ {1,-2, 0, 1, 0, 0}, -7.00000000e-01, +1.00000000e-01 },
{/*137455*/ {1,-2, 2,-1, 0, 0}, -1.00000000e-01, +0.00000000e+00 },
{/*145545*/ {1,-1, 0, 0,-1, 0}, -1.30000000e+00, +1.00000000e-01 },
{/*145555*/ {1,-1, 0, 0, 0, 0}, -6.80000000e+00, +6.00000000e-01 },
{/*147555*/ {1,-1, 2, 0, 0, 0}, +1.00000000e-01, +0.00000000e+00 },
{/*153655*/ {1, 0,-2, 1, 0, 0}, +1.00000000e-01, +0.00000000e+00 },
{/*155445*/ {1, 0, 0,-1,-1, 0}, +1.00000000e-01, +0.00000000e+00 },
{/*155455*/ {1, 0, 0,-1, 0, 0}, +4.00000000e-01, +0.00000000e+00 },
{/*155655*/ {1, 0, 0, 1, 0, 0}, +1.30000000e+00, -1.00000000e-01 },
{/*155665*/ {1, 0, 0, 1, 1, 0}, +3.00000000e-01, +0.00000000e+00 },
{/*157455*/ {1, 0, 2,-1, 0, 0}, +3.00000000e-01, +0.00000000e+00 },
{/*157465*/ {1, 0, 2,-1, 1, 0}, +1.00000000e-01, +0.00000000e+00 },
{/*162556*/ {1, 1,-3, 0, 0, 1}, -1.90000000e+00, +1.00000000e-01 },
{/*163545*/ {1, 1,-2, 0,-1, 0}, +5.00000000e-01, +0.00000000e+00 },
{/*163555*/ {1, 1,-2, 0, 0, 0}, -4.34000000e+01, +2.90000000e+00 },
{/*164554*/ {1, 1,-1, 0, 0,-1}, +6.00000000e-01, +0.00000000e+00 },
{/*164556*/ {1, 1,-1, 0, 0, 1}, +1.60000000e+00, -1.00000000e-01 },
{/*165345*/ {1, 1, 0,-2,-1, 0}, +1.00000000e-01, +0.00000000e+00 },
{/*165535*/ {1, 1, 0, 0,-2, 0}, +1.00000000e-01, +0.00000000e+00 },
{/*165545*/ {1, 1, 0, 0,-1, 0}, -8.80000000e+00, +5.00000000e-01 },
{/*165555*/ {1, 1, 0, 0, 0, 0}, +4.70900000e+02, -3.02000000e+01 },
{/*165565*/ {1, 1, 0, 0, 1, 0}, +6.81000000e+01, -4.60000000e+00 },
{/*165575*/ {1, 1, 0, 0, 2, 0}, -1.60000000e+00, +1.00000000e-01 },
{/*166455*/ {1, 1, 1,-1, 0, 0}, +1.00000000e-01, +0.00000000e+00 },
{/*166544*/ {1, 1, 1, 0,-1,-1}, -1.00000000e-01, +0.00000000e+00 },
{/*166554*/ {1, 1, 1, 0, 0,-1}, -2.06000000e+01, -3.00000000e-01 },
{/*166556*/ {1, 1, 1, 0, 0, 1}, +3.00000000e-01, +0.00000000e+00 },
{/*166564*/ {1, 1, 1, 0, 1,-1}, -3.00000000e-01, +0.00000000e+00 },
{/*167355*/ {1, 1, 2,-2, 0, 0}, -2.00000000e-01, +0.00000000e+00 },
{/*167365*/ {1, 1, 2,-2, 1, 0}, -1.00000000e-01, +0.00000000e+00 },
{/*167555*/ {1, 1, 2, 0, 0, 0}, -5.00000000e+00, +3.00000000e-01 },
{/*167565*/ {1, 1, 2, 0, 1, 0}, +2.00000000e-01, +0.00000000e+00 },
{/*168554*/ {1, 1, 3, 0, 0,-1}, -2.00000000e-01, +0.00000000e+00 },
{/*173655*/ {1, 2,-2, 1, 0, 0}, -5.00000000e-01, +0.00000000e+00 },
{/*173665*/ {1, 2,-2, 1, 1, 0}, -1.00000000e-01, +0.00000000e+00 },
{/*175445*/ {1, 2, 0,-1,-1, 0}, +1.00000000e-01, +0.00000000e+00 },
{/*175455*/ {1, 2, 0,-1, 0, 0}, -2.10000000e+00, +1.00000000e-01 },
{/*175465*/ {1, 2, 0,-1, 1, 0}, -4.00000000e-01, +0.00000000e+00 },
{/*183555*/ {1, 3,-2, 0, 0, 0}, -2.00000000e-01, +0.00000000e+00 },
{/*185355*/ {1, 3, 0,-2, 0, 0}, -1.00000000e-01, +0.00000000e+00 },
{/*185555*/ {1, 3, 0, 0, 0, 0}, -6.00000000e-01, +0.00000000e+00 },
{/*185565*/ {1, 3, 0, 0, 1, 0}, -4.00000000e-01, +0.00000000e+00 },
{/*185575*/ {1, 3, 0, 0, 2, 0}, -1.00000000e-01, +0.00000000e+00 },
{/*195455*/ {1, 4, 0,-1, 0, 0}, -1.00000000e-01, +0.00000000e+00 },
{/*195465*/ {1, 4, 0,-1, 1, 0}, -1.00000000e-01, +0.00000000e+00 },
{/* 55565*/ {0, 0, 0, 0, 1, 0}, +1.66000000e+01, -6.70000000e+00 },
{/* 55575*/ {0, 0, 0, 0, 2, 0}, -1.00000000e-01, +1.00000000e-01 },
{/* 56554*/ {0, 0, 1, 0, 0,-1}, -1.20000000e+00, +8.00000000e-01 },
{/* 57555*/ {0, 0, 2, 0, 0, 0}, -5.50000000e+00, +4.30000000e+00 },
{/* 57565*/ {0, 0, 2, 0, 1, 0}, +1.00000000e-01, -1.00000000e-01 },
{/* 58554*/ {0, 0, 3, 0, 0,-1}, -3.00000000e-01, +2.00000000e-01 },
{/* 63655*/ {0, 1,-2, 1, 0, 0}, -3.00000000e-01, +7.00000000e-01 },
{/* 65445*/ {0, 1, 0,-1,-1, 0}, +1.00000000e-01, -2.00000000e-01 },
{/* 65455*/ {0, 1, 0,-1, 0, 0}, -1.20000000e+00, +3.70000000e+00 },
{/* 65465*/ {0, 1, 0,-1, 1, 0}, +1.00000000e-01, -2.00000000e-01 },
{/* 65655*/ {0, 1, 0, 1, 0, 0}, +1.00000000e-01, -2.00000000e-01 },
{/* 73555*/ {0, 2,-2, 0, 0, 0}, +0.00000000e+00, +6.00000000e-01 },
{/* 75355*/ {0, 2, 0,-2, 0, 0}, +0.00000000e+00, +3.00000000e-01 },
{/* 75555*/ {0, 2, 0, 0, 0, 0}, +6.00000000e-01, +6.30000000e+00 },
{/* 75565*/ {0, 2, 0, 0, 1, 0}, +2.00000000e-01, +2.60000000e+00 },
{/* 75575*/ {0, 2, 0, 0, 2, 0}, +0.00000000e+00, +2.00000000e-01 },
{/* 83655*/ {0, 3,-2, 1, 0, 0}, +1.00000000e-01, +2.00000000e-01 },
{/* 85455*/ {0, 3, 0,-1, 0, 0}, +4.00000000e-01, +1.10000000e+00 },
{/* 85465*/ {0, 3, 0,-1, 1, 0}, +2.00000000e-01, +5.00000000e-01 },
{/* 93555*/ {0, 4,-2, 0, 0, 0}, +1.00000000e-01, +2.00000000e-01 },
{/* 95355*/ {0, 4, 0,-2, 0, 0}, +1.00000000e-01, +1.00000000e-01 },
{/*245655*/ {2,-1, 0, 1, 0, 0}, -3.00000000e-01, +0.00000000e+00 },
{/*255555*/ {2, 0, 0, 0, 0, 0}, -1.20000000e+00, +0.00000000e+00 }
}}; /* Step2m20 */
} /* unnamed namespace */

int dso::SolidEarthTide::potential_step2(const dso::MjdEpoch &mjdtt,
                                                const dso::MjdEpoch &mjdut1,
                                                const double *const delaunay_args,
                                                double &dC20, double &dC21,
                                                double &dS21, double &dC22,
                                                double &dS22) const noexcept {
  // printf("Computing SE tides at time %d %.15f\n", mjdtt.imjd(), mjdtt.fractional_days().days());
  // printf("Computing GMST at time %d %.15f\n", mjdut1.imjd(), mjdut1.fractional_days().days());
  // silence compiler warning
  assert(mjdtt.imjd() > 0);

  /* compute GMST using IAU 2006/2000A [rad] */
  // const double gmst = dso::gmst(mjdtt, mjdut1);
  const double gmst = gmst_torsten(mjdut1);
  // printf("Gmst = %.15e\n", gmst);

  /* compute six-vector of multipliers ni from Delaunay vars */
  double __dargs[6];
  const double *__restrict__ f =
      dso::delaunay2doodson(delaunay_args, gmst, __dargs);

  /* loop through constituents */
  for (const auto &c : Step2) {
    /* compute angle: θ(f) = Σ(i=1,6) n(i)*β(i) */
    const double arg = c.mdn.argument(f);
    const double carg = std::cos(arg);
    const double sarg = std::sin(arg);
    if (c.mdn.operator()(0) == 1) {
      /* terms for (n,m)=(2,1) Eq. 6.8b from IERS 2010 */
      dC21 += (c.ampInPhase * sarg + c.ampOutOfPhase * carg);
      dS21 += (c.ampInPhase * carg - c.ampOutOfPhase * sarg);
    } else if (c.mdn.operator()(0) == 0) {
      /* terms for (n,m)=(2,0) Eq. 6.8a from IERS 2010 */
      dC20 += (c.ampInPhase * carg - c.ampOutOfPhase * sarg);
    } else if (c.mdn.operator()(0) == 2) {
      /* terms for (n,m)=(2,2) Eq. 6.8b from IERS 2010 */
      dC22 += (c.ampInPhase * carg - c.ampOutOfPhase * sarg);
      dS22 -= (c.ampInPhase * sarg + c.ampOutOfPhase * carg);
    }
  }

  /* scale dC and dS */
  dC20 *= 1e-12;
  dC21 *= 1e-12;
  dS21 *= 1e-12;
  dC22 *= 1e-12;
  dS22 *= 1e-12;

  return 0;
}
