#include "grid.hpp"
#include "pole_tide.hpp"
#include "geodesy/units.hpp"
#include <charconv>
#include <cstring>
#include <fstream>

namespace {
constexpr const int MAX_CH = 256;
const char *nf(const char *line) noexcept {
  while (*line && *line != '=')
    ++line;
  while (*line && *line == ' ')
    ++line;
  return line;
}

int parse_desai_header(std::ifstream &fin,
                       dso::TwoDimGrid<dso::GridAxis::Y> &grd) noexcept {
  char line[MAX_CH];
  /* first three lineas, are just details; skip
   * Ocean Pole Load Tide Deformation Parameters from Self-Consistent
   * Equilibrium Model of Ocean Pole Tide (Desai, 2002)
   * Deformation Parameters Generated by S. Desai on March 28, 2006: CM
   * correction applied
   */
  for (int i = 0; i < 3; i++)
    fin.getline(line, MAX_CH);

  /* Resolve each of the following lines:
   * Number_longitude_Grid_Points =       720
   * First_longitude_degrees      =      0.25
   * Last_longitude_degrees       =    359.75
   * Longitude_step_degrees       =      0.50
   * Number_latitude_grid_points  =       360
   * First_latitude_degrees       =    -89.75
   * Last_latitude_degrees        =     89.75
   * Latitude_step_degrees        =      0.50
   */
  long lon_pts, lat_pts;
  double lon_start, lon_last, lon_step;
  double lat_start, lat_last, lat_step;
  {
    fin.getline(line, MAX_CH);
    const char *str = "Number_longitude_Grid_Points";
    if (std::strncmp(line, str, std::strlen(str))) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file; expected %s found %s "
              "(traceback: %s)\n",
              str, line, __func__);
      return 1;
    }
    const int sz = std::strlen(line);
    auto [ptr, ec] = std::from_chars(nf(line), line + sz, lon_pts);
    if (ec == std::errc()) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file for line %s (traceback: "
              "%s)\n",
              line, __func__);
      return 2;
    }
  }
  {
    fin.getline(line, MAX_CH);
    const char *str = "First_longitude_degrees";
    if (std::strncmp(line, str, std::strlen(str))) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file; expected %s found %s "
              "(traceback: %s)\n",
              str, line, __func__);
      return 1;
    }
    const int sz = std::strlen(line);
    auto [ptr, ec] = std::from_chars(nf(line), line + sz, lon_start);
    if (ec == std::errc()) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file for line %s (traceback: "
              "%s)\n",
              line, __func__);
      return 2;
    }
  }
  {
    fin.getline(line, MAX_CH);
    const char *str = "Last_longitude_degrees";
    if (std::strncmp(line, str, std::strlen(str))) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file; expected %s found %s "
              "(traceback: %s)\n",
              str, line, __func__);
      return 1;
    }
    const int sz = std::strlen(line);
    auto [ptr, ec] = std::from_chars(nf(line), line + sz, lon_last);
    if (ec == std::errc()) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file for line %s (traceback: "
              "%s)\n",
              line, __func__);
      return 2;
    }
  }
  {
    fin.getline(line, MAX_CH);
    const char *str = "Longitude_step_degrees";
    if (std::strncmp(line, str, std::strlen(str))) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file; expected %s found %s "
              "(traceback: %s)\n",
              str, line, __func__);
      return 1;
    }
    const int sz = std::strlen(line);
    auto [ptr, ec] = std::from_chars(nf(line), line + sz, lon_step);
    if (ec == std::errc()) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file for line %s (traceback: "
              "%s)\n",
              line, __func__);
      return 2;
    }
  }
  {
    fin.getline(line, MAX_CH);
    const char *str = "Number_latitude_Grid_Points";
    if (std::strncmp(line, str, std::strlen(str))) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file; expected %s found %s "
              "(traceback: %s)\n",
              str, line, __func__);
      return 1;
    }
    const int sz = std::strlen(line);
    auto [ptr, ec] = std::from_chars(nf(line), line + sz, lat_pts);
    if (ec == std::errc()) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file for line %s (traceback: "
              "%s)\n",
              line, __func__);
      return 2;
    }
  }
  {
    fin.getline(line, MAX_CH);
    const char *str = "First_latitude_degrees";
    if (std::strncmp(line, str, std::strlen(str))) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file; expected %s found %s "
              "(traceback: %s)\n",
              str, line, __func__);
      return 1;
    }
    const int sz = std::strlen(line);
    auto [ptr, ec] = std::from_chars(nf(line), line + sz, lat_start);
    if (ec == std::errc()) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file for line %s (traceback: "
              "%s)\n",
              line, __func__);
      return 2;
    }
  }
  {
    fin.getline(line, MAX_CH);
    const char *str = "Last_latitude_degrees";
    if (std::strncmp(line, str, std::strlen(str))) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file; expected %s found %s "
              "(traceback: %s)\n",
              str, line, __func__);
      return 1;
    }
    const int sz = std::strlen(line);
    auto [ptr, ec] = std::from_chars(nf(line), line + sz, lat_last);
    if (ec == std::errc()) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file for line %s (traceback: "
              "%s)\n",
              line, __func__);
      return 2;
    }
  }
  {
    fin.getline(line, MAX_CH);
    const char *str = "Latitude_step_degrees";
    if (std::strncmp(line, str, std::strlen(str))) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file; expected %s found %s "
              "(traceback: %s)\n",
              str, line, __func__);
      return 1;
    }
    const int sz = std::strlen(line);
    auto [ptr, ec] = std::from_chars(nf(line), line + sz, lat_step);
    if (ec == std::errc()) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file for line %s (traceback: "
              "%s)\n",
              line, __func__);
      return 2;
    }
  }
  {
    fin.getline(line, MAX_CH);
    const char *str = "Longitude   Latitude   u_r^R       u_r^I       u_n^R    "
                      "   u_n^I       u_e^R       u_e^I";
    if (std::strncmp(line, str, std::strlen(str))) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file; expected %s found %s "
              "(traceback: %s)\n",
              str, line, __func__);
      return 1;
    }
  }
  {
    fin.getline(line, MAX_CH);
    const char *str = "(degrees)  (degrees)  (        )  (        )  (        "
                      ")  (        )  (        )  (        )";
    if (std::strncmp(line, str, std::strlen(str))) {
      fprintf(stderr,
              "[ERROR] Failed parsing OPT coeffs file; expected %s found %s "
              "(traceback: %s)\n",
              str, line, __func__);
      return 1;
    }
  }
  /* last header line is just ommited */
  fin.getline(line, MAX_CH);

  grd = dso::TwoDimGrid<dso::GridAxis::Y>(lon_start, lon_step, lon_pts,
                                          lat_start, lat_step, lat_pts);
  return 0;
}

struct SiteNode { long bl, br, tl, tr; };

std::vector<long> nodes2indexes(const std::vector<SiteNode> &nodes) noexcept {
  std::vector<long> vidx;
  vidx.reserve(nodes.size() * 4);
  for (const auto &n : nodes) {
    vidx.insert(vidx.end(), n.bl);
    vidx.insert(vidx.end(), n.br);
    vidx.insert(vidx.end(), n.tl);
    vidx.insert(vidx.end(), n.tr);
  }
  std::sort(vidx.begin(), vidx.end());
  return vidx;
}

struct OptRecord {
  double lon, lat, rR, rI, nR, nI, eR, eI;
}; /* OptRecord */
} /* unnamed namespace */

int dso::get_desai_ocp_deformation_coeffs(
    const char *fn, std::vector<dso::GeodeticCrd> &sta) noexcept {
  std::ifstream fin(fn);
  if (!fn.is_open()) {
    fprintf(stderr,
            "[ERROR] Failed opening ocean pole tide deformation coeffs file %s "
            "(traceback: %s)\n",
            fn, __func__);
    return 1;
  }

  /* cosntruct the grid */
  dso::TwoDimGrid<dso::GridAxis::Y> grd;
  if (parse_desai_header(fin, grd)) {
    fprintf(stderr,
            "[ERROR] Failed parsing Ocean Pole Tide (deformation) coefficients "
            "file %s (traceback: %s)\n",
            fn, __func__);
    return 1;
  }

  /* for each site in list, compute the line numbers of the 4 neighbouring 
   * nodes, i.e. BL, BR, TL, TR
   */
  std::vector<SiteNode> nodes;
  nodes.reserve(sta.size());
  for (const auto &s : sta) {
    long bl, br, tl, tr;
    grd.surrounding_nodes(dso::rad2deg(s.lon()), dso::rad2deg(s.lat()), bl, br,
                           tl, tr);
    nodes.emplace_back(SiteNode{bl, br, tl, tr});
  }

  /* sorted list of indexes (i.e. line numbers) to be read */
  const auto lines2read = nodes2indexes(nodes);
  
}
