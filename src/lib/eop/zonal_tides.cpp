#include "doodson.hpp"
#include "eop.hpp"
#include "geodesy/units.hpp"
#include <array>
#include <cmath>

namespace {
struct Table81Entry {
  int lm, lpm, fm, dm, om;
  double per, dut1B, dut1C, dlodB, dlodC, domegaB, domegaC;
  double ksi(const double *const f) const {
    return dso::anp<dso::detail::AngleUnit::Radians>(
        f[0] * (double)lm + f[1] * (double)lpm + f[2] * (double)fm +
        f[3] * (double)dm + f[4] * (double)om);
  }
}; /* Table81Entry */

constexpr std::array<Table81Entry, 62> Table81 = {
    {{1, 0, 2, 2, 2, 5.64, -0.0235, 0e0, 0.2617, 0e0, -0.2209, 0e0},
     {2, 0, 2, 0, 1, 6.85, -0.0404, 0e0, 0.3706, 0e0, -0.3128, 0e0},
     {2, 0, 2, 0, 2, 6.86, -0.0987, 0e0, 0.9041, 0e0, -0.7630, 0e0},
     {0, 0, 2, 2, 1, 7.09, -0.0508, 0e0, 0.4499, 0e0, -0.3797, 0e0},
     {0, 0, 2, 2, 2, 7.10, -0.1231, 0e0, 1.0904, 0e0, -0.9203, 0e0},
     {1, 0, 2, 0, 0, 9.11, -0.0385, 0e0, 0.2659, 0e0, -0.2244, 0e0},
     {1, 0, 2, 0, 1, 9.12, -0.4108, 0e0, 2.8298, 0e0, -2.3884, 0e0},
     {1, 0, 2, 0, 2, 9.13, -0.9926, 0e0, 6.8291, 0e0, -5.7637, 0e0},
     {3, 0, 0, 0, 0, 9.18, -0.0179, 0e0, 0.1222, 0e0, -0.1031, 0e0},
     {-1, 0, 2, 2, 1, 9.54, -0.0818, 0e0, 0.5384, 0e0, -0.4544, 0e0},
     {-1, 0, 2, 2, 2, 9.56, -0.1974, 0e0, 1.2978, 0e0, -1.0953, 0e0},
     {1, 0, 0, 2, 0, 9.61, -0.0761, 0e0, 0.4976, 0e0, -0.4200, 0e0},
     {2, 0, 2, -2, 2, 12.81, 0.0216, 0e0, -0.1060, 0e0, 0.0895, 0e0},
     {0, 1, 2, 0, 2, 13.17, 0.0254, 0e0, -0.1211, 0e0, 0.1022, 0e0},
     {0, 0, 2, 0, 0, 13.61, -0.2989, 0e0, 1.3804, 0e0, -1.1650, 0e0},
     {0, 0, 2, 0, 1, 13.63, -3.1873, 0.2010, 14.6890, 0.9266, -12.3974,
      -0.7820},
     {0, 0, 2, 0, 2, 13.66, -7.8468, 0.5320, 36.0910, 2.4469, -30.4606,
      -2.0652},
     {2, 0, 0, 0, -1, 13.75, 0.0216, 0e0, -0.0988, 0e0, 0.0834, 0e0},
     {2, 0, 0, 0, 0, 13.78, -0.3384, 0e0, 1.5433, 0e0, -1.3025, 0e0},
     {2, 0, 0, 0, 1, 13.81, 0.0179, 0e0, -0.0813, 0e0, 0.0686, 0e0},
     {0, -1, 2, 0, 2, 14.19, -0.0244, 0e0, 0.1082, 0e0, -0.0913, 0e0},
     {0, 0, 0, 2, -1, 14.73, 0.0470, 0e0, -0.2004, 0e0, 0.1692, 0e0},
     {0, 0, 0, 2, 0, 14.77, -0.7341, 0e0, 3.1240, 0e0, -2.6367, 0e0},
     {0, 0, 0, 2, 1, 14.80, -0.0526, 0e0, 0.2235, 0e0, -0.1886, 0e0},
     {0, -1, 0, 2, 0, 15.39, -0.0508, 0e0, 0.2073, 0e0, -0.1749, 0e0},
     {1, 0, 2, -2, 1, 23.86, 0.0498, 0e0, -0.1312, 0e0, 0.1107, 0e0},
     {1, 0, 2, -2, 2, 23.94, 0.1006, 0e0, -0.2640, 0e0, 0.2228, 0e0},
     {1, 1, 0, 0, 0, 25.62, 0.0395, 0e0, -0.0968, 0e0, 0.0817, 0e0},
     {-1, 0, 2, 0, 0, 26.88, 0.0470, 0e0, -0.1099, 0e0, 0.0927, 0e0},
     {-1, 0, 2, 0, 1, 26.98, 0.1767, 0e0, -0.4115, 0e0, 0.3473, 0e0},
     {-1, 0, 2, 0, 2, 27.09, 0.4352, 0e0, -1.0093, 0e0, 0.8519, 0e0},
     {1, 0, 0, 0, -1, 27.44, 0.5339, 0e0, -1.2224, 0e0, 1.0317, 0e0},
     {1, 0, 0, 0, 0, 27.56, -8.4046, 0.2500, 19.1647, 0.5701, -16.1749,
      -0.4811},
     {1, 0, 0, 0, 1, 27.67, 0.5443, 0e0, -1.2360, 0e0, 1.0432, 0e0},
     {0, 0, 0, 1, 0, 29.53, 0.0470, 0e0, -0.1000, 0e0, 0.0844, 0e0},
     {1, -1, 0, 0, 0, 29.80, -0.0555, 0e0, 0.1169, 0e0, -0.0987, 0e0},
     {-1, 0, 0, 2, -1, 31.66, 0.1175, 0e0, -0.2332, 0e0, 0.1968, 0e0},
     {-1, 0, 0, 2, 0, 31.81, -1.8236, 0e0, 3.6018, 0e0, -3.0399, 0e0},
     {-1, 0, 0, 2, 1, 31.96, 0.1316, 0e0, -0.2587, 0e0, 0.2183, 0e0},
     {1, 0, -2, 2, -1, 32.61, 0.0179, 0e0, -0.0344, 0e0, 0.0290, 0e0},
     {-1, -1, 0, 2, 0, 34.85, -0.0855, 0e0, 0.1542, 0e0, -0.1302, 0e0},
     {0, 2, 2, -2, 2, 91.31, -0.0573, 0e0, 0.0395, 0e0, -0.0333, 0e0},
     {0, 1, 2, -2, 1, 119.61, 0.0329, 0e0, -0.0173, 0e0, 0.0146, 0e0},
     {0, 1, 2, -2, 2, 121.75, -1.8847, 0e0, 0.9726, 0e0, -0.8209, 0e0},
     {0, 0, 2, -2, 0, 173.31, 0.2510, 0e0, -0.0910, 0e0, 0.0768, 0e0},
     {0, 0, 2, -2, 1, 177.84, 1.1703, 0e0, -0.4135, 0e0, 0.3490, 0e0},
     {0, 0, 2, -2, 2, 182.62, -49.7174, 0.4330, 17.1056, 0.1490, -14.4370,
      -0.1257},
     {0, 2, 0, 0, 0, 182.63, -0.1936, 0e0, 0.0666, 0e0, -0.0562, 0e0},
     {2, 0, 0, -2, -1, 199.84, 0.0489, 0e0, -0.0154, 0e0, 0.0130, 0e0},
     {2, 0, 0, -2, 0, 205.89, -0.5471, 0e0, 0.1670, 0e0, -0.1409, 0e0},
     {2, 0, 0, -2, 1, 212.32, 0.0367, 0e0, -0.0108, 0e0, 0.0092, 0e0},
     {0, -1, 2, -2, 1, 346.60, -0.0451, 0e0, 0.0082, 0e0, -0.0069, 0e0},
     {0, 1, 0, 0, -1, 346.64, 0.0921, 0e0, -0.0167, 0e0, 0.0141, 0e0},
     {0, -1, 2, -2, 2, 365.22, 0.8281, 0e0, -0.1425, 0e0, 0.1202, 0e0},
     {0, 1, 0, 0, 0, 365.26, -15.8887, 0.1530, 2.7332, 0.0263, -2.3068,
      -0.0222},
     {0, 1, 0, 0, 1, 386.00, -0.1382, 0e0, 0.0225, 0e0, -0.0190, 0e0},
     {1, 0, 0, -1, 0, 411.78, 0.0348, 0e0, -0.0053, 0e0, 0.0045, 0e0},
     {2, 0, -2, 0, 0, -1095.18, -0.1372, 0e0, -0.0079, 0e0, 0.0066, 0e0},
     {-2, 0, 2, 0, 1, 1305.48, 0.4211, 0e0, -0.0203, 0e0, 0.0171, 0e0},
     {-1, 1, 0, 1, 0, 3232.86, -0.0404, 0e0, 0.0008, 0e0, -0.0007, 0e0},
     {0, 0, 0, 0, 2, -3399.19, 7.8998, 0e0, 0.1460, 0e0, -0.1232, 0e0},
     {0, 0, 0, 0, 1, -6798.38, -1617.2681, 0e0, -14.9471, 0e0, 12.6153, 0e0}}};
} /* unnamed namespace */

int dso::deop_zonal_tide(const double *const fargs, double &dut1, double &dlod,
                         double &domega) noexcept {

  /* set corrections to zero */
  dut1 = dlod = domega = 0e0;
  for (const auto &entry : Table81) {
    const double ksi = entry.ksi(fargs);
    const double sk = std::sin(ksi);
    const double ck = std::cos(ksi);
    dut1 += entry.dut1B * sk + entry.dut1C * ck;
    dlod += entry.dlodB * ck + entry.dlodC * sk;
    domega += entry.domegaB * ck + entry.domegaC * sk;
  }

  /* scale (see units of Table 8.1) */
  dut1 *= 1e-2;
  dlod *= 1e-1;

  return 0;
}
