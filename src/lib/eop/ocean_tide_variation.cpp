#include "doodson.hpp"
#include "eop.hpp"
#include <array>
#include <cmath>

namespace {
struct Table8Data {
  /* Doodson numbers from IERS 2010, Tables 8.2a, 8.2b, 8.3a and 8.3b */
  dso::DoodsonConstituent dn;
  /* cooresponding Coefficients of sin(argument) and cos(argument) */
  double xps, xpc, yps, ypc, ut1s, ut1c, lods, lodc;
};
constexpr const std::array<Table8Data, 71> Table8 = {
    {{{+1, -4, +2, +1, +0, +0},
      +0.00000e+00,
      +9.00000e-01,
      -9.00000e-01,
      -1.00000e-01,
      +4.00000e-01,
      -8.00000e-02,
      -4.00000e-01,
      -2.10000e+00},
     {{+1, -3, +0, +2, -1, +0},
      +1.00000e-01,
      +6.00000e-01,
      -6.00000e-01,
      +1.00000e-01,
      +1.90000e-01,
      -6.00000e-02,
      -3.00000e-01,
      -1.10000e+00},
     {{+1, -3, +0, +2, +0, +0},
      +3.00000e-01,
      +3.40000e+00,
      -3.40000e+00,
      +3.00000e-01,
      +1.03000e+00,
      -3.10000e-01,
      -1.70000e+00,
      -5.60000e+00},
     {{+1, -3, +2, +0, -1, +0},
      +1.00000e-01,
      +8.00000e-01,
      -8.00000e-01,
      +1.00000e-01,
      +2.20000e-01,
      -7.00000e-02,
      -4.00000e-01,
      -1.20000e+00},
     {{+1, -3, +2, +0, +0, +0},
      +5.00000e-01,
      +4.20000e+00,
      -4.10000e+00,
      +5.00000e-01,
      +1.19000e+00,
      -3.90000e-01,
      -2.10000e+00,
      -6.40000e+00},
     {{+1, -2, +0, +1, -1, +0},
      +1.20000e+00,
      +5.00000e+00,
      -5.00000e+00,
      +1.20000e+00,
      +9.70000e-01,
      -4.70000e-01,
      -2.70000e+00,
      -5.40000e+00},
     {{+1, -2, +0, +1, +0, +0},
      +6.20000e+00,
      +2.63000e+01,
      -2.63000e+01,
      +6.20000e+00,
      +5.12000e+00,
      -2.50000e+00,
      -1.40000e+01,
      -2.87000e+01},
     {{+1, -2, +2, -1, -1, +0},
      +2.00000e-01,
      +9.00000e-01,
      -9.00000e-01,
      +2.00000e-01,
      +1.70000e-01,
      -9.00000e-02,
      -5.00000e-01,
      -1.00000e+00},
     {{+1, -2, +2, -1, +0, +0},
      +1.30000e+00,
      +5.00000e+00,
      -5.00000e+00,
      +1.30000e+00,
      +9.10000e-01,
      -4.70000e-01,
      -2.70000e+00,
      -5.10000e+00},
     {{+1, -1, +0, +0, -2, +0},
      -3.00000e-01,
      -8.00000e-01,
      +8.00000e-01,
      -3.00000e-01,
      -9.00000e-02,
      +7.00000e-02,
      +4.00000e-01,
      +5.00000e-01},
     {{+1, -1, +0, +0, -1, +0},
      +9.20000e+00,
      +2.51000e+01,
      -2.51000e+01,
      +9.20000e+00,
      +3.03000e+00,
      -2.28000e+00,
      -1.33000e+01,
      -1.77000e+01},
     {{+1, -1, +0, +0, +0, +0},
      +4.88000e+01,
      +1.32900e+02,
      -1.32900e+02,
      +4.88000e+01,
      +1.60200e+01,
      -1.20700e+01,
      -7.05000e+01,
      -9.36000e+01},
     {{+1, -1, +0, +2, +0, +0},
      -3.00000e-01,
      -9.00000e-01,
      +9.00000e-01,
      -3.00000e-01,
      -1.00000e-01,
      +8.00000e-02,
      +5.00000e-01,
      +6.00000e-01},
     {{+1, -1, +2, +0, +0, +0},
      -7.00000e-01,
      -1.70000e+00,
      +1.70000e+00,
      -7.00000e-01,
      -1.90000e-01,
      +1.50000e-01,
      +9.00000e-01,
      +1.10000e+00},
     {{+1, +0, -2, +1, +0, +0},
      -4.00000e-01,
      -9.00000e-01,
      +9.00000e-01,
      -4.00000e-01,
      -8.00000e-02,
      +7.00000e-02,
      +5.00000e-01,
      +5.00000e-01},
     {{+1, +0, +0, -1, -1, +0},
      -3.00000e-01,
      -6.00000e-01,
      +6.00000e-01,
      -3.00000e-01,
      -6.00000e-02,
      +5.00000e-02,
      +3.00000e-01,
      +4.00000e-01},
     {{+1, +0, +0, -1, +0, +0},
      -1.60000e+00,
      -3.50000e+00,
      +3.50000e+00,
      -1.60000e+00,
      -3.10000e-01,
      +2.70000e-01,
      +1.70000e+00,
      +1.90000e+00},
     {{+1, +0, +0, +1, +0, +0},
      -4.50000e+00,
      -9.60000e+00,
      +9.60000e+00,
      -4.50000e+00,
      -8.60000e-01,
      +7.50000e-01,
      +4.60000e+00,
      +5.20000e+00},
     {{+1, +0, +0, +1, +1, +0},
      -9.00000e-01,
      -1.90000e+00,
      +1.90000e+00,
      -9.00000e-01,
      -1.70000e-01,
      +1.50000e-01,
      +9.00000e-01,
      +1.00000e+00},
     {{+1, +0, +2, -1, +0, +0},
      -9.00000e-01,
      -1.80000e+00,
      +1.80000e+00,
      -9.00000e-01,
      -1.60000e-01,
      +1.40000e-01,
      +8.00000e-01,
      +1.00000e+00},
     {{+1, +1, -3, +0, +0, +1},
      +1.50000e+00,
      +3.00000e+00,
      -3.00000e+00,
      +1.50000e+00,
      +3.10000e-01,
      -1.90000e-01,
      -1.20000e+00,
      -2.00000e+00},
     {{+1, +1, -2, +0, -1, +0},
      -3.00000e-01,
      -6.00000e-01,
      +6.00000e-01,
      -3.00000e-01,
      -6.00000e-02,
      +3.00000e-02,
      +2.00000e-01,
      +4.00000e-01},
     {{+1, +1, -2, +0, +0, +0},
      +2.61000e+01,
      +5.12000e+01,
      -5.12000e+01,
      +2.61000e+01,
      +5.51000e+00,
      -3.10000e+00,
      -1.94000e+01,
      -3.45000e+01},
     {{+1, +1, -1, +0, +0, -1},
      -2.00000e-01,
      -4.00000e-01,
      +4.00000e-01,
      -2.00000e-01,
      -5.00000e-02,
      +2.00000e-02,
      +2.00000e-01,
      +3.00000e-01},
     {{+1, +1, -1, +0, +0, +1},
      -6.00000e-01,
      -1.20000e+00,
      +1.20000e+00,
      -6.00000e-01,
      -1.30000e-01,
      +7.00000e-02,
      +4.00000e-01,
      +8.00000e-01},
     {{+1, +1, +0, +0, -1, +0},
      +1.50000e+00,
      +3.00000e+00,
      -3.00000e+00,
      +1.50000e+00,
      +3.50000e-01,
      -1.70000e-01,
      -1.10000e+00,
      -2.20000e+00},
     {{+1, +1, +0, +0, +0, +0},
      -7.75000e+01,
      -1.51700e+02,
      +1.51700e+02,
      -7.75000e+01,
      -1.76200e+01,
      +8.55000e+00,
      +5.39000e+01,
      +1.11000e+02},
     {{+1, +1, +0, +0, +1, +0},
      -1.05000e+01,
      -2.06000e+01,
      +2.06000e+01,
      -1.05000e+01,
      -2.39000e+00,
      +1.16000e+00,
      +7.30000e+00,
      +1.51000e+01},
     {{+1, +1, +0, +0, +2, +0},
      +2.00000e-01,
      +4.00000e-01,
      -4.00000e-01,
      +2.00000e-01,
      +5.00000e-02,
      -3.00000e-02,
      -2.00000e-01,
      -3.00000e-01},
     {{+1, +1, +1, +0, +0, -1},
      -6.00000e-01,
      -1.20000e+00,
      +1.20000e+00,
      -6.00000e-01,
      -1.40000e-01,
      +6.00000e-02,
      +4.00000e-01,
      +9.00000e-01},
     {{+1, +1, +2, +0, +0, +0},
      -1.10000e+00,
      -2.10000e+00,
      +2.10000e+00,
      -1.10000e+00,
      -2.70000e-01,
      +1.10000e-01,
      +7.00000e-01,
      +1.70000e+00},
     {{+1, +2, -2, +1, +0, +0},
      -7.00000e-01,
      -1.40000e+00,
      +1.40000e+00,
      -7.00000e-01,
      -2.90000e-01,
      +4.00000e-02,
      +3.00000e-01,
      +1.90000e+00},
     {{+1, +2, +0, -1, +0, +0},
      -3.50000e+00,
      -7.30000e+00,
      +7.30000e+00,
      -3.50000e+00,
      -1.61000e+00,
      +1.90000e-01,
      +1.20000e+00,
      +1.05000e+01},
     {{+1, +2, +0, -1, +1, +0},
      -7.00000e-01,
      -1.40000e+00,
      +1.40000e+00,
      -7.00000e-01,
      -3.20000e-01,
      +4.00000e-02,
      +2.00000e-01,
      +2.10000e+00},
     {{+1, +3, -2, +0, +0, +0},
      -4.00000e-01,
      -1.10000e+00,
      +1.10000e+00,
      -4.00000e-01,
      -4.10000e-01,
      -1.00000e-02,
      -0.00000e+00,
      +2.70000e+00},
     {{+1, +3, +0, -2, +0, +0},
      -2.00000e-01,
      -5.00000e-01,
      +5.00000e-01,
      -2.00000e-01,
      -2.10000e-01,
      -1.00000e-02,
      -0.00000e+00,
      +1.40000e+00},
     {{+1, +3, +0, +0, +0, +0},
      -1.10000e+00,
      -3.40000e+00,
      +3.40000e+00,
      -1.10000e+00,
      -1.44000e+00,
      -4.00000e-02,
      -3.00000e-01,
      +9.70000e+00},
     {{+1, +3, +0, +0, +1, +0},
      -7.00000e-01,
      -2.20000e+00,
      +2.20000e+00,
      -7.00000e-01,
      -9.20000e-01,
      -2.00000e-02,
      -2.00000e-01,
      +6.20000e+00},
     {{+1, +3, +0, +0, +2, +0},
      -1.00000e-01,
      -5.00000e-01,
      +5.00000e-01,
      -1.00000e-01,
      -1.90000e-01,
      +0.00000e+00,
      -0.00000e+00,
      +1.30000e+00},
     {{+1, +4, +0, -1, +0, +0},
      +0.00000e+00,
      -6.00000e-01,
      +6.00000e-01,
      +0.00000e+00,
      -4.00000e-01,
      -2.00000e-02,
      -2.00000e-01,
      +2.80000e+00},
     {{+1, +4, +0, -1, +1, +0},
      +0.00000e+00,
      -4.00000e-01,
      +4.00000e-01,
      +0.00000e+00,
      -2.50000e-01,
      -2.00000e-02,
      -1.00000e-01,
      +1.80000e+00},
     {{+2, -3, +0, +3, +0, +0},
      -5.00000e-01,
      +0.00000e+00,
      +6.00000e-01,
      +2.00000e-01,
      -9.00000e-02,
      -1.00000e-02,
      -1.00000e-01,
      +1.00000e+00},
     {{+2, -3, +2, +1, +0, +0},
      -1.30000e+00,
      -2.00000e-01,
      +1.50000e+00,
      +7.00000e-01,
      -2.20000e-01,
      -3.00000e-02,
      -4.00000e-01,
      +2.60000e+00},
     {{+2, -2, +0, +2, +0, +0},
      -6.10000e+00,
      -1.60000e+00,
      +3.10000e+00,
      +3.40000e+00,
      -6.40000e-01,
      -1.80000e-01,
      -2.10000e+00,
      +7.40000e+00},
     {{+2, -2, +2, +0, +0, +0},
      -7.60000e+00,
      -2.00000e+00,
      +3.40000e+00,
      +4.20000e+00,
      -7.40000e-01,
      -2.20000e-01,
      -2.60000e+00,
      +8.70000e+00},
     {{+2, -2, +3, +0, +0, -1},
      -5.00000e-01,
      -1.00000e-01,
      +2.00000e-01,
      +3.00000e-01,
      -5.00000e-02,
      -2.00000e-02,
      -2.00000e-01,
      +6.00000e-01},
     {{+2, -1, -1, +1, +0, +1},
      +5.00000e-01,
      +1.00000e-01,
      -1.00000e-01,
      -3.00000e-01,
      +3.00000e-02,
      +1.00000e-02,
      +2.00000e-01,
      -4.00000e-01},
     {{+2, -1, +0, +1, -1, +0},
      +2.10000e+00,
      +5.00000e-01,
      -4.00000e-01,
      -1.20000e+00,
      +1.40000e-01,
      +6.00000e-02,
      +7.00000e-01,
      -1.70000e+00},
     {{+2, -1, +0, +1, +0, +0},
      -5.69000e+01,
      -1.29000e+01,
      +1.11000e+01,
      +3.29000e+01,
      -3.79000e+00,
      -1.56000e+00,
      -1.86000e+01,
      +4.52000e+01},
     {{+2, -1, +1, +1, +0, -1},
      -5.00000e-01,
      -1.00000e-01,
      +1.00000e-01,
      +3.00000e-01,
      -3.00000e-02,
      -1.00000e-02,
      -2.00000e-01,
      +4.00000e-01},
     {{+2, -1, +2, -1, +0, +0},
      -1.10000e+01,
      -2.40000e+00,
      +1.90000e+00,
      +6.40000e+00,
      -7.00000e-01,
      -3.00000e-01,
      -3.60000e+00,
      +8.30000e+00},
     {{+2, -1, +3, -1, +0, -1},
      -5.00000e-01,
      -1.00000e-01,
      +1.00000e-01,
      +3.00000e-01,
      -3.00000e-02,
      -1.00000e-02,
      -2.00000e-01,
      +4.00000e-01},
     {{+2, +0, -2, +2, +0, +0},
      +1.00000e+00,
      +1.00000e-01,
      -1.00000e-01,
      -6.00000e-01,
      +5.00000e-02,
      +2.00000e-02,
      +3.00000e-01,
      -6.00000e-01},
     {{+2, +0, -1, +0, +0, +1},
      +1.10000e+00,
      +1.00000e-01,
      -1.00000e-01,
      -7.00000e-01,
      +6.00000e-02,
      +3.00000e-02,
      +3.00000e-01,
      -7.00000e-01},
     {{+2, +0, +0, +0, -1, +0},
      +1.23000e+01,
      +1.00000e+00,
      -1.40000e+00,
      -7.30000e+00,
      +6.00000e-01,
      +2.70000e-01,
      +3.20000e+00,
      -7.30000e+00},
     {{+2, +0, +0, +0, +0, +0},
      -3.30200e+02,
      -2.70000e+01,
      +3.76000e+01,
      +1.95900e+02,
      -1.61900e+01,
      -7.25000e+00,
      -8.68000e+01,
      +1.96600e+02},
     {{+2, +0, +1, +0, +0, -1},
      -1.00000e+00,
      -1.00000e-01,
      +1.00000e-01,
      +6.00000e-01,
      -5.00000e-02,
      -2.00000e-02,
      -3.00000e-01,
      +6.00000e-01},
     {{+2, +1, -2, +1, +0, +0},
      +2.50000e+00,
      -3.00000e-01,
      -4.00000e-01,
      -1.50000e+00,
      +1.10000e-01,
      +3.00000e-02,
      +4.00000e-01,
      -1.40000e+00},
     {{+2, +1, +0, -1, +0, +0},
      +9.40000e+00,
      -1.40000e+00,
      -1.90000e+00,
      -5.60000e+00,
      +4.20000e-01,
      +1.20000e-01,
      +1.40000e+00,
      -5.30000e+00},
     {{+2, +1, +0, +1, +0, +0},
      -2.40000e+00,
      +4.00000e-01,
      +5.00000e-01,
      +1.40000e+00,
      -1.10000e-01,
      -3.00000e-02,
      -4.00000e-01,
      +1.30000e+00},
     {{+2, +1, +0, +1, +1, +0},
      -1.00000e+00,
      +2.00000e-01,
      +2.00000e-01,
      +6.00000e-01,
      -5.00000e-02,
      -1.00000e-02,
      -2.00000e-01,
      +6.00000e-01},
     {{+2, +2, -3, +0, +0, +1},
      -8.50000e+00,
      +3.50000e+00,
      +3.30000e+00,
      +5.10000e+00,
      -4.40000e-01,
      -2.00000e-02,
      -2.00000e-01,
      +5.50000e+00},
     {{+2, +2, -2, +0, +0, +0},
      -1.44100e+02,
      +6.36000e+01,
      +5.92000e+01,
      +8.66000e+01,
      -7.55000e+00,
      -1.60000e-01,
      -2.00000e+00,
      +9.48000e+01},
     {{+2, +2, -1, +0, +0, -1},
      +1.20000e+00,
      -6.00000e-01,
      -5.00000e-01,
      -7.00000e-01,
      +6.00000e-02,
      +0.00000e+00,
      +0.00000e+00,
      -8.00000e-01},
     {{+2, +2, +0, +0, -1, +0},
      +5.00000e-01,
      -2.00000e-01,
      -2.00000e-01,
      -3.00000e-01,
      +3.00000e-02,
      +0.00000e+00,
      -0.00000e+00,
      -3.00000e-01},
     {{+2, +2, +0, +0, +0, +0},
      -3.85000e+01,
      +1.91000e+01,
      +1.77000e+01,
      +2.31000e+01,
      -2.10000e+00,
      +4.00000e-02,
      +5.00000e-01,
      +2.65000e+01},
     {{+2, +2, +0, +0, +1, +0},
      -1.14000e+01,
      +5.80000e+00,
      +5.30000e+00,
      +6.90000e+00,
      -6.30000e-01,
      +1.00000e-02,
      +2.00000e-01,
      +7.90000e+00},
     {{+2, +2, +0, +0, +2, +0},
      -1.20000e+00,
      +6.00000e-01,
      +6.00000e-01,
      +7.00000e-01,
      -7.00000e-02,
      +0.00000e+00,
      +0.00000e+00,
      +9.00000e-01},
     {{+2, +3, +0, -1, +0, +0},
      -1.80000e+00,
      +1.80000e+00,
      +1.70000e+00,
      +1.00000e+00,
      -1.50000e-01,
      +4.00000e-02,
      +5.00000e-01,
      +1.90000e+00},
     {{+2, +3, +0, -1, +1, +0},
      -8.00000e-01,
      +8.00000e-01,
      +8.00000e-01,
      +5.00000e-01,
      -6.00000e-02,
      +2.00000e-02,
      +2.00000e-01,
      +8.00000e-01},
     {{+2, +4, +0, +0, +0, +0},
      -3.00000e-01,
      +6.00000e-01,
      +7.00000e-01,
      +2.00000e-01,
      -5.00000e-02,
      +2.00000e-02,
      +2.00000e-01,
      +6.00000e-01}}}; /* Table8 */
constexpr const std::array<Table8Data, 28> Madzak16 = {
    {{{1, -3, 0, 2, 0, 0},
      0.700,
      4.800,
      -4.800,
      0.700,
      0.900,
      -0.300,
      -1.700,
      -4.600},
     {{1, -3, 2, 0, 0, 0},
      0.900,
      5.700,
      -5.700,
      0.900,
      1.000,
      -0.400,
      -2.100,
      -5.400},
     {{1, -2, 0, 1, -1, 0},
      1.900,
      5.800,
      -5.800,
      1.900,
      0.800,
      -0.500,
      -2.700,
      -4.700},
     {{1, -2, 0, 1, 0, 0},
      10.300,
      30.500,
      -30.500,
      10.300,
      4.400,
      -2.500,
      -14.200,
      -24.600},
     {{1, -2, 2, -1, 0, 0},
      2.000,
      5.600,
      -5.600,
      2.000,
      0.800,
      -0.500,
      -2.700,
      -4.400},
     {{1, -1, 0, 0, -1, 0},
      12.200,
      27.400,
      -27.400,
      12.200,
      2.900,
      -2.500,
      -14.500,
      -16.800},
     {{1, -1, 0, 0, 0, 0},
      65.100,
      146.100,
      -146.100,
      65.100,
      15.300,
      -13.300,
      -77.600,
      -89.500},
     {{1, 0, 0, -1, 0, 0},
      -1.400,
      -3.800,
      3.800,
      -1.400,
      -0.400,
      0.300,
      1.800,
      2.200},
     {{1, 0, 0, 1, 0, 0},
      -4.000,
      -10.500,
      10.500,
      -4.000,
      -1.000,
      0.900,
      5.300,
      6.300},
     {{1, 1, -3, 0, 0, 1},
      1.900,
      3.300,
      -3.300,
      1.900,
      0.300,
      -0.200,
      -1.400,
      -1.900},
     {{1, 1, -2, 0, 0, 0},
      28.100,
      40.300,
      -40.300,
      28.100,
      4.600,
      -2.900,
      -18.200,
      -29.000},
     {{1, 1, 0, 0, -1, 0},
      2.200,
      3.100,
      -3.100,
      2.200,
      0.300,
      -0.200,
      -1.300,
      -1.900},
     {{1, 1, 0, 0, 0, 0},
      -113.000,
      -158.000,
      158.000,
      -113.000,
      -15.300,
      9.700,
      61.400,
      96.500},
     {{1, 1, 0, 0, 1, 0},
      -15.300,
      -21.400,
      21.400,
      -15.300,
      -2.100,
      1.300,
      8.300,
      13.100},
     {{1, 2, 0, -1, 0, 0},
      -11.900,
      -6.400,
      6.400,
      -11.900,
      -0.700,
      0.100,
      0.600,
      4.300},
     {{1, 3, 0, 0, 0, 0},
      -11.200,
      -1.900,
      1.900,
      -11.200,
      -0.200,
      -0.300,
      -1.700,
      1.700},
     {{1, 3, 0, 0, 1, 0},
      -7.200,
      -1.200,
      1.200,
      -7.200,
      -0.200,
      -0.200,
      -1.100,
      1.100},
     {{2, -2, 0, 2, 0, 0},
      -6.600,
      -0.900,
      1.100,
      4.000,
      -0.400,
      -0.400,
      -5.000,
      5.200},
     {{2, -2, 2, 0, 0, 0},
      -8.000,
      -1.100,
      1.200,
      4.800,
      -0.500,
      -0.500,
      -5.900,
      6.300},
     {{2, -1, 0, 1, 0, 0},
      -49.400,
      -10.300,
      4.300,
      32.500,
      -2.700,
      -2.100,
      -24.900,
      32.100},
     {{2, -1, 2, -1, 0, 0},
      -9.600,
      -1.800,
      1.000,
      6.100,
      -0.500,
      -0.400,
      -4.700,
      6.400},
     {{2, 0, 0, 0, -1, 0},
      10.600,
      0.900,
      -1.600,
      -6.500,
      0.600,
      0.300,
      3.500,
      -7.400},
     {{2, 0, 0, 0, 0, 0},
      -282.100,
      -24.600,
      43.600,
      174.000,
      -16.500,
      -8.000,
      -96.700,
      200.300},
     {{2, 1, 0, -1, 0, 0},
      8.400,
      -1.100,
      -2.300,
      -5.300,
      0.400,
      0.300,
      3.100,
      -4.500},
     {{2, 2, -3, 0, 0, 1},
      -8.200,
      2.400,
      3.100,
      4.700,
      -0.400,
      -0.200,
      -2.100,
      5.400},
     {{2, 2, -2, 0, 0, 0},
      -132.300,
      53.100,
      56.100,
      84.300,
      -8.700,
      -1.800,
      -22.200,
      109.900},
     {{2, 2, 0, 0, 0, 0},
      -38.000,
      12.700,
      15.500,
      21.400,
      -2.200,
      -0.600,
      -7.200,
      27.700},
     {{2, 2, 0, 0, 1, 0},
      -11.400,
      3.800,
      4.600,
      6.300,
      -0.700,
      -0.200,
      -2.200,
      8.300}}}; /* Madzak16 */
} /* unnamed namespace */

int dso::deop_ocean_tide(const double *const fargs, double gmst, double &dxp,
                         double &dyp, double &dut1, double &dlod) noexcept {
  /* get Doodson arguments from Delaunay arguments and GMST */
  double dargs[6];
  dso::delaunay2doodson(fargs, gmst, dargs);
  /* these will never change */
  const double *__restrict__ f = dargs;

  /* set corrections to zero */
  dxp = dyp = dut1 = dlod = 0e0;
  for (const auto &entry : Table8) {
    const double arg = entry.dn.argument(f);
    const double sa = std::sin(arg);
    const double ca = std::cos(arg);
    dxp += sa * entry.xps + ca * entry.xpc;    /* microarcseconds */
    dyp += sa * entry.yps + ca * entry.ypc;    /* microarcseconds */
    dut1 += sa * entry.ut1s + ca * entry.ut1c; /* microseconds */
    dlod += sa * entry.lods + ca * entry.lodc; /* microseconds */
  }

  return 0;
}
